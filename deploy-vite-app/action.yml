name: Deploy Vite App
description: "Build and deploy a Vite application to VPS with nginx reverse proxy configuration"

inputs:
  host:
    description: "VPS hostname or IP"
    required: true
  user:
    description: "SSH username"
    required: true
  port:
    description: "SSH port"
    required: false
    default: "22"
  service_name:
    description: "Name of the service (used for config file naming)"
    required: true
  container_name:
    description: "Name of the Docker container"
    required: true
  container_port:
    description: "Internal port the container will run on"
    required: true
  image_name:
    description: "Name for the Docker image"
    required: true
  app_directory:
    description: "Directory containing the Vite app (with package.json and vite.config)"
    required: true
  build_command:
    description: "NPM build command"
    required: false
    default: "npm run build"
  dist_folder:
    description: "Build output folder (relative to app_directory)"
    required: false
    default: "dist"
  node_version:
    description: "Node.js version to use for building"
    required: false
    default: "22"
  build_args:
    description: "Docker build arguments (multiline string, e.g., 'ARG1=value1\nARG2=value2')"
    required: false
    default: ""
  docker_network:
    description: "Docker network to connect the container to"
    required: false
    default: "microservices"

runs:
  using: "composite"
  steps:
    - name: Build Docker Image
      shell: bash
      env:
        IMAGE_NAME: "${{ inputs.image_name }}"
        APP_DIR: "${{ inputs.app_directory }}"
        BUILD_CMD: "${{ inputs.build_command }}"
        DIST_FOLDER: "${{ inputs.dist_folder }}"
        CONTAINER_PORT: "${{ inputs.container_port }}"
        NODE_VERSION: "${{ inputs.node_version }}"
        BUILD_ARGS: "${{ inputs.build_args }}"
      run: |
        set -euo pipefail

        echo "üî® Building Docker image for Vite app..."
        echo "   Image: $IMAGE_NAME"
        echo "   App directory: $APP_DIR"
        echo "   Build command: $BUILD_CMD"
        echo "   Dist folder: $DIST_FOLDER"
        echo "   Node version: $NODE_VERSION"
        if [ -n "$BUILD_ARGS" ]; then
          echo "   Build args: present"
        fi

        # Check if app directory exists
        if [ ! -d "$APP_DIR" ]; then
          echo "‚ùå App directory not found: $APP_DIR"
          exit 1
        fi

        # Check if package.json exists
        if [ ! -f "$APP_DIR/package.json" ]; then
          echo "‚ùå package.json not found in $APP_DIR"
          exit 1
        fi

        # Create Dockerfile in app directory using echo commands
        echo "# Build stage" > "$APP_DIR/Dockerfile.vite"
        echo "FROM node:${NODE_VERSION} AS builder" >> "$APP_DIR/Dockerfile.vite"
        echo "" >> "$APP_DIR/Dockerfile.vite"
        echo "WORKDIR /app" >> "$APP_DIR/Dockerfile.vite"
        echo "" >> "$APP_DIR/Dockerfile.vite"

        # Add ARG and ENV declarations if build args are provided
        if [ -n "$BUILD_ARGS" ]; then
          echo "# Build arguments" >> "$APP_DIR/Dockerfile.vite"
          echo "$BUILD_ARGS" | while IFS= read -r line; do
            if [ -n "$line" ]; then
              # Extract ARG name from "NAME=value" format
              ARG_NAME=$(echo "$line" | cut -d= -f1)
              echo "ARG $ARG_NAME" >> "$APP_DIR/Dockerfile.vite"
              # Convert ARG to ENV so Vite can access it during build
              echo "ENV $ARG_NAME=\${$ARG_NAME}" >> "$APP_DIR/Dockerfile.vite"
            fi
          done
          echo "" >> "$APP_DIR/Dockerfile.vite"
        fi

        echo "# Copy package files" >> "$APP_DIR/Dockerfile.vite"
        echo "COPY package*.json ./" >> "$APP_DIR/Dockerfile.vite"
        echo "COPY yarn.lock* ./" >> "$APP_DIR/Dockerfile.vite"
        echo "" >> "$APP_DIR/Dockerfile.vite"
        echo "# Install dependencies (support both npm and yarn)" >> "$APP_DIR/Dockerfile.vite"
        echo "RUN if [ -f yarn.lock ]; then corepack enable && yarn install --frozen-lockfile; else npm ci; fi" >> "$APP_DIR/Dockerfile.vite"
        echo "" >> "$APP_DIR/Dockerfile.vite"
        echo "# Copy source code" >> "$APP_DIR/Dockerfile.vite"
        echo "COPY . ." >> "$APP_DIR/Dockerfile.vite"
        echo "" >> "$APP_DIR/Dockerfile.vite"
        echo "# Build the application" >> "$APP_DIR/Dockerfile.vite"
        echo "RUN ${BUILD_CMD}" >> "$APP_DIR/Dockerfile.vite"
        echo "" >> "$APP_DIR/Dockerfile.vite"
        echo "# Production stage" >> "$APP_DIR/Dockerfile.vite"
        echo "FROM node:${NODE_VERSION}-alpine" >> "$APP_DIR/Dockerfile.vite"
        echo "" >> "$APP_DIR/Dockerfile.vite"
        echo "WORKDIR /app" >> "$APP_DIR/Dockerfile.vite"
        echo "" >> "$APP_DIR/Dockerfile.vite"
        echo "# Install serve globally" >> "$APP_DIR/Dockerfile.vite"
        echo "RUN npm install -g serve" >> "$APP_DIR/Dockerfile.vite"
        echo "" >> "$APP_DIR/Dockerfile.vite"
        echo "# Copy built files from builder stage" >> "$APP_DIR/Dockerfile.vite"
        echo "COPY --from=builder /app/${DIST_FOLDER} ./dist" >> "$APP_DIR/Dockerfile.vite"
        echo "" >> "$APP_DIR/Dockerfile.vite"
        echo "# Expose port" >> "$APP_DIR/Dockerfile.vite"
        echo "EXPOSE ${CONTAINER_PORT}" >> "$APP_DIR/Dockerfile.vite"
        echo "" >> "$APP_DIR/Dockerfile.vite"
        echo "# Start serve with proper flags" >> "$APP_DIR/Dockerfile.vite"
        echo "CMD [\"serve\", \"-s\", \"dist\", \"-l\", \"${CONTAINER_PORT}\", \"--no-port-switching\", \"--no-clipboard\"]" >> "$APP_DIR/Dockerfile.vite"

        # Create .dockerignore if it doesn't exist
        if [ ! -f "$APP_DIR/.dockerignore" ]; then
          echo "node_modules" > "$APP_DIR/.dockerignore"
          echo "dist" >> "$APP_DIR/.dockerignore"
          echo ".git" >> "$APP_DIR/.dockerignore"
          echo ".github" >> "$APP_DIR/.dockerignore"
          echo ".env" >> "$APP_DIR/.dockerignore"
          echo ".env.local" >> "$APP_DIR/.dockerignore"
          echo ".env.*.local" >> "$APP_DIR/.dockerignore"
          echo "*.log" >> "$APP_DIR/.dockerignore"
          echo ".DS_Store" >> "$APP_DIR/.dockerignore"
          echo "coverage" >> "$APP_DIR/.dockerignore"
          echo ".vscode" >> "$APP_DIR/.dockerignore"
          echo ".idea" >> "$APP_DIR/.dockerignore"
          echo "*.md" >> "$APP_DIR/.dockerignore"
          echo "Dockerfile*" >> "$APP_DIR/.dockerignore"
          echo "‚úÖ Created .dockerignore file"
        fi

        # Build the image
        echo "üî® Building Docker image..."

        # Prepare build args for docker build command
        BUILD_ARGS_CMD=""
        if [ -n "$BUILD_ARGS" ]; then
          echo "üìù Build arguments provided:"
          while IFS= read -r line; do
            if [ -n "$line" ]; then
              # Extract just the key name (before =) for display
              ARG_KEY=$(echo "$line" | cut -d= -f1)
              echo "   - $ARG_KEY"
              BUILD_ARGS_CMD="$BUILD_ARGS_CMD --build-arg $line"
            fi
          done <<< "$BUILD_ARGS"
        fi

        docker build -f "$APP_DIR/Dockerfile.vite" $BUILD_ARGS_CMD -t "$IMAGE_NAME:latest" "$APP_DIR"

        echo "‚úÖ Docker image built successfully: $IMAGE_NAME:latest"

    - name: Save and Transfer Docker Image
      shell: bash
      env:
        IMAGE_NAME: "${{ inputs.image_name }}"
      run: |
        set -euo pipefail

        echo "üíæ Saving Docker image to tar.gz..."
        docker save "$IMAGE_NAME:latest" | gzip > "/tmp/${IMAGE_NAME}.tar.gz"

        echo "üì¶ Image size: $(du -h /tmp/${IMAGE_NAME}.tar.gz | cut -f1)"

        echo "üì§ Transferring image to VPS..."
        scp -i ~/.ssh/id_rsa -P "${{ inputs.port }}" \
          -o StrictHostKeyChecking=no -o IdentitiesOnly=yes \
          "/tmp/${IMAGE_NAME}.tar.gz" \
          "${{ inputs.user }}@${{ inputs.host }}:/tmp/${IMAGE_NAME}.tar.gz"

        echo "‚úÖ Image transferred successfully"

        # Cleanup local tar.gz
        rm -f "/tmp/${IMAGE_NAME}.tar.gz"

    - name: Deploy Container on VPS
      shell: bash
      env:
        IMAGE_NAME: "${{ inputs.image_name }}"
        CONTAINER_NAME: "${{ inputs.container_name }}"
        CONTAINER_PORT: "${{ inputs.container_port }}"
        DOCKER_NETWORK: "${{ inputs.docker_network }}"
      run: |
        ssh -i ~/.ssh/id_rsa -p "${{ inputs.port }}" \
          -o StrictHostKeyChecking=no -o IdentitiesOnly=yes -o LogLevel=ERROR -T \
          "${{ inputs.user }}@${{ inputs.host }}" \
          "IMAGE_NAME='$IMAGE_NAME' CONTAINER_NAME='$CONTAINER_NAME' CONTAINER_PORT='$CONTAINER_PORT' DOCKER_NETWORK='$DOCKER_NETWORK' bash -s" <<'EOF'
          set -euo pipefail

          echo "üöÄ Deploying container: $CONTAINER_NAME"

          # Load the image
          echo "üì¶ Loading Docker image..."
          sudo docker load < "/tmp/${IMAGE_NAME}.tar.gz"

          # Stop and remove old container if it exists
          if sudo docker ps -a --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
            echo "üõë Stopping old container..."
            sudo docker stop "$CONTAINER_NAME" || true
            echo "üóë Removing old container..."
            sudo docker rm "$CONTAINER_NAME" || true
          fi

          # Create Docker network if it doesn't exist
          if ! sudo docker network ls --format '{{.Name}}' | grep -q "^${DOCKER_NETWORK}$"; then
            echo "üåê Creating Docker network: $DOCKER_NETWORK"
            sudo docker network create "$DOCKER_NETWORK"
          fi

          # Run new container
          echo "‚ñ∂Ô∏è Starting new container..."
          sudo docker run -d \
            --name "$CONTAINER_NAME" \
            --network "$DOCKER_NETWORK" \
            --restart unless-stopped \
            -p "127.0.0.1:${CONTAINER_PORT}:${CONTAINER_PORT}" \
            "${IMAGE_NAME}:latest"

          # Wait for container to be healthy
          echo "‚è≥ Waiting for container to start..."
          sleep 3

          # Check container status
          if sudo docker ps --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
            echo "‚úÖ Container started successfully"
            echo "üìä Container status:"
            sudo docker ps --filter "name=$CONTAINER_NAME" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          else
            echo "‚ùå Container failed to start"
            echo "üìù Container logs:"
            sudo docker logs "$CONTAINER_NAME"
            exit 1
          fi

          # Cleanup transferred image file
          echo "üßπ Cleaning up transferred image file..."
          rm -f "/tmp/${IMAGE_NAME}.tar.gz"

          # Remove old images (keep latest)
          echo "üßπ Cleaning up old Docker images..."
          OLD_IMAGES=$(sudo docker images "$IMAGE_NAME" --format "{{.ID}} {{.Tag}}" | grep -v "latest" | awk '{print $1}' || true)
          if [ -n "$OLD_IMAGES" ]; then
            echo "$OLD_IMAGES" | xargs -r sudo docker rmi -f || true
          fi

          echo "üéâ Deployment completed successfully!"
        EOF

    - name: Verify Deployment
      shell: bash
      env:
        SERVICE_NAME: "${{ inputs.service_name }}"
        CONTAINER_NAME: "${{ inputs.container_name }}"
        SERVER_NAME: "${{ inputs.server_name }}"
        ENABLE_SSL: "${{ inputs.enable_ssl }}"
      run: |
        ssh -i ~/.ssh/id_rsa -p "${{ inputs.port }}" \
          -o StrictHostKeyChecking=no -o IdentitiesOnly=yes -o LogLevel=ERROR -T \
          "${{ inputs.user }}@${{ inputs.host }}" \
          "CONTAINER_NAME='$CONTAINER_NAME' bash -s" <<'EOF'
          set -euo pipefail

          echo "üîç Verifying deployment..."

          # Check container is running
          if sudo docker ps --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
            echo "‚úÖ Container is running"
          else
            echo "‚ùå Container is not running"
            exit 1
          fi

          # Show container logs (last 10 lines)
          echo "üìù Recent container logs:"
          sudo docker logs --tail=10 "$CONTAINER_NAME"

          echo "‚úÖ Verification completed!"
        EOF

        echo ""
        echo "üéâ Vite app deployed successfully!"
        echo "üìã Deployment Details:"
        echo "   Service: $SERVICE_NAME"
        echo "   Container: $CONTAINER_NAME"
        echo ""
        echo "Next step: Configure nginx reverse proxy using affpro/vps-deploybot/configure-nginx-service"
