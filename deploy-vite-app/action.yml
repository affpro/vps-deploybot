name: Deploy Vite App
description: "Build and deploy a Vite application to VPS with nginx reverse proxy configuration"

inputs:
  host:
    description: "VPS hostname or IP"
    required: true
  user:
    description: "SSH username"
    required: true
  port:
    description: "SSH port"
    required: false
    default: "22"
  service_name:
    description: "Name of the service (used for config file naming)"
    required: true
  container_name:
    description: "Name of the Docker container"
    required: true
  container_port:
    description: "Internal port the container will run on"
    required: true
  image_name:
    description: "Name for the Docker image"
    required: true
  server_name:
    description: "Server name for subdomain routing (e.g., app.example.com)"
    required: true
  app_directory:
    description: "Directory containing the Vite app (with package.json and vite.config)"
    required: true
  build_command:
    description: "NPM build command"
    required: false
    default: "npm run build"
  dist_folder:
    description: "Build output folder (relative to app_directory)"
    required: false
    default: "dist"
  node_version:
    description: "Node.js version to use for building"
    required: false
    default: "22"
  nginx_container_name:
    description: "Name of the nginx proxy container"
    required: false
    default: "nginx_proxy"
  enable_ssl:
    description: "Enable SSL/HTTPS configuration"
    required: false
    default: "false"
  ssl_cert_path:
    description: "Path to SSL certificate file in nginx container"
    required: false
    default: ""
  ssl_key_path:
    description: "Path to SSL private key file in nginx container"
    required: false
    default: ""
  docker_network:
    description: "Docker network to connect the container to"
    required: false
    default: "microservices"

runs:
  using: "composite"
  steps:
    - name: Build Docker Image
      shell: bash
      env:
        IMAGE_NAME: "${{ inputs.image_name }}"
        APP_DIR: "${{ inputs.app_directory }}"
        BUILD_CMD: "${{ inputs.build_command }}"
        DIST_FOLDER: "${{ inputs.dist_folder }}"
        CONTAINER_PORT: "${{ inputs.container_port }}"
        NODE_VERSION: "${{ inputs.node_version }}"
      run: |
        set -euo pipefail

        echo "🔨 Building Docker image for Vite app..."
        echo "   Image: $IMAGE_NAME"
        echo "   App directory: $APP_DIR"
        echo "   Build command: $BUILD_CMD"
        echo "   Dist folder: $DIST_FOLDER"
        echo "   Node version: $NODE_VERSION"

        # Check if app directory exists
        if [ ! -d "$APP_DIR" ]; then
          echo "❌ App directory not found: $APP_DIR"
          exit 1
        fi

        # Check if package.json exists
        if [ ! -f "$APP_DIR/package.json" ]; then
          echo "❌ package.json not found in $APP_DIR"
          exit 1
        fi

        # Create Dockerfile in app directory
        cat > "$APP_DIR/Dockerfile.vite" <<'DOCKERFILE_EOF'
# Build stage
FROM node:NODE_VERSION as builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci

# Copy source code
COPY . .

# Build the application
RUN BUILD_COMMAND

# Production stage
FROM node:NODE_VERSION-alpine

WORKDIR /app

# Install serve globally
RUN npm install -g serve

# Copy built files from builder stage
COPY --from=builder /app/DIST_FOLDER ./dist

# Expose port
EXPOSE CONTAINER_PORT

# Start serve with proper flags
CMD ["serve", "-s", "dist", "-l", "CONTAINER_PORT", "--no-port-switching", "--no-clipboard"]
DOCKERFILE_EOF

        # Replace placeholders
        sed -i.bak "s|NODE_VERSION|$NODE_VERSION|g" "$APP_DIR/Dockerfile.vite"
        sed -i.bak "s|BUILD_COMMAND|$BUILD_CMD|g" "$APP_DIR/Dockerfile.vite"
        sed -i.bak "s|DIST_FOLDER|$DIST_FOLDER|g" "$APP_DIR/Dockerfile.vite"
        sed -i.bak "s|CONTAINER_PORT|$CONTAINER_PORT|g" "$APP_DIR/Dockerfile.vite"
        rm -f "$APP_DIR/Dockerfile.vite.bak"

        # Create .dockerignore if it doesn't exist
        if [ ! -f "$APP_DIR/.dockerignore" ]; then
          cat > "$APP_DIR/.dockerignore" <<'DOCKERIGNORE_EOF'
node_modules
dist
.git
.github
.env
.env.local
.env.*.local
*.log
.DS_Store
coverage
.vscode
.idea
*.md
Dockerfile*
DOCKERIGNORE_EOF
          echo "✅ Created .dockerignore file"
        fi

        # Build the image
        echo "🔨 Building Docker image..."
        docker build -f "$APP_DIR/Dockerfile.vite" -t "$IMAGE_NAME:latest" "$APP_DIR"

        echo "✅ Docker image built successfully: $IMAGE_NAME:latest"

    - name: Save and Transfer Docker Image
      shell: bash
      env:
        IMAGE_NAME: "${{ inputs.image_name }}"
      run: |
        set -euo pipefail

        echo "💾 Saving Docker image to tar.gz..."
        docker save "$IMAGE_NAME:latest" | gzip > "/tmp/${IMAGE_NAME}.tar.gz"

        echo "📦 Image size: $(du -h /tmp/${IMAGE_NAME}.tar.gz | cut -f1)"

        echo "📤 Transferring image to VPS..."
        scp -i ~/.ssh/id_rsa -P "${{ inputs.port }}" \
          -o StrictHostKeyChecking=no -o IdentitiesOnly=yes \
          "/tmp/${IMAGE_NAME}.tar.gz" \
          "${{ inputs.user }}@${{ inputs.host }}:/tmp/${IMAGE_NAME}.tar.gz"

        echo "✅ Image transferred successfully"

        # Cleanup local tar.gz
        rm -f "/tmp/${IMAGE_NAME}.tar.gz"

    - name: Deploy Container on VPS
      shell: bash
      env:
        IMAGE_NAME: "${{ inputs.image_name }}"
        CONTAINER_NAME: "${{ inputs.container_name }}"
        CONTAINER_PORT: "${{ inputs.container_port }}"
        DOCKER_NETWORK: "${{ inputs.docker_network }}"
      run: |
        ssh -i ~/.ssh/id_rsa -p "${{ inputs.port }}" \
          -o StrictHostKeyChecking=no -o IdentitiesOnly=yes -o LogLevel=ERROR -T \
          "${{ inputs.user }}@${{ inputs.host }}" \
          "IMAGE_NAME='$IMAGE_NAME' CONTAINER_NAME='$CONTAINER_NAME' CONTAINER_PORT='$CONTAINER_PORT' DOCKER_NETWORK='$DOCKER_NETWORK' bash -s" <<'EOF'
          set -euo pipefail

          echo "🚀 Deploying container: $CONTAINER_NAME"

          # Load the image
          echo "📦 Loading Docker image..."
          sudo docker load < "/tmp/${IMAGE_NAME}.tar.gz"

          # Stop and remove old container if it exists
          if sudo docker ps -a --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
            echo "🛑 Stopping old container..."
            sudo docker stop "$CONTAINER_NAME" || true
            echo "🗑 Removing old container..."
            sudo docker rm "$CONTAINER_NAME" || true
          fi

          # Create Docker network if it doesn't exist
          if ! sudo docker network ls --format '{{.Name}}' | grep -q "^${DOCKER_NETWORK}$"; then
            echo "🌐 Creating Docker network: $DOCKER_NETWORK"
            sudo docker network create "$DOCKER_NETWORK"
          fi

          # Run new container
          echo "▶️ Starting new container..."
          sudo docker run -d \
            --name "$CONTAINER_NAME" \
            --network "$DOCKER_NETWORK" \
            --restart unless-stopped \
            -p "127.0.0.1:${CONTAINER_PORT}:${CONTAINER_PORT}" \
            "${IMAGE_NAME}:latest"

          # Wait for container to be healthy
          echo "⏳ Waiting for container to start..."
          sleep 3

          # Check container status
          if sudo docker ps --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
            echo "✅ Container started successfully"
            echo "📊 Container status:"
            sudo docker ps --filter "name=$CONTAINER_NAME" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          else
            echo "❌ Container failed to start"
            echo "📝 Container logs:"
            sudo docker logs "$CONTAINER_NAME"
            exit 1
          fi

          # Cleanup transferred image file
          echo "🧹 Cleaning up transferred image file..."
          rm -f "/tmp/${IMAGE_NAME}.tar.gz"

          # Remove old images (keep latest)
          echo "🧹 Cleaning up old Docker images..."
          OLD_IMAGES=$(sudo docker images "$IMAGE_NAME" --format "{{.ID}} {{.Tag}}" | grep -v "latest" | awk '{print $1}' || true)
          if [ -n "$OLD_IMAGES" ]; then
            echo "$OLD_IMAGES" | xargs -r sudo docker rmi -f || true
          fi

          echo "🎉 Deployment completed successfully!"
        EOF

    - name: Configure Nginx Reverse Proxy
      uses: ./configure-nginx-service
      with:
        host: ${{ inputs.host }}
        user: ${{ inputs.user }}
        port: ${{ inputs.port }}
        service_name: ${{ inputs.service_name }}
        container_name: ${{ inputs.container_name }}
        container_port: ${{ inputs.container_port }}
        routing_type: "subdomain"
        server_name: ${{ inputs.server_name }}
        nginx_container_name: ${{ inputs.nginx_container_name }}
        enable_ssl: ${{ inputs.enable_ssl }}
        ssl_cert_path: ${{ inputs.ssl_cert_path }}
        ssl_key_path: ${{ inputs.ssl_key_path }}

    - name: Verify Deployment
      shell: bash
      env:
        SERVICE_NAME: "${{ inputs.service_name }}"
        CONTAINER_NAME: "${{ inputs.container_name }}"
        SERVER_NAME: "${{ inputs.server_name }}"
        ENABLE_SSL: "${{ inputs.enable_ssl }}"
      run: |
        ssh -i ~/.ssh/id_rsa -p "${{ inputs.port }}" \
          -o StrictHostKeyChecking=no -o IdentitiesOnly=yes -o LogLevel=ERROR -T \
          "${{ inputs.user }}@${{ inputs.host }}" \
          "CONTAINER_NAME='$CONTAINER_NAME' bash -s" <<'EOF'
          set -euo pipefail

          echo "🔍 Verifying deployment..."

          # Check container is running
          if sudo docker ps --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
            echo "✅ Container is running"
          else
            echo "❌ Container is not running"
            exit 1
          fi

          # Show container logs (last 10 lines)
          echo "📝 Recent container logs:"
          sudo docker logs --tail=10 "$CONTAINER_NAME"

          echo "✅ Verification completed!"
        EOF

        echo ""
        echo "🎉 Vite app deployed successfully!"
        echo "📋 Deployment Details:"
        echo "   Service: $SERVICE_NAME"
        echo "   Container: $CONTAINER_NAME"
        if [ "$ENABLE_SSL" = "true" ]; then
          echo "   URL: https://$SERVER_NAME"
        else
          echo "   URL: http://$SERVER_NAME"
        fi
