name: Setup VPS Nginx Reverse Proxy
description: "Install and configure nginx as a Docker container for reverse proxy and load balancing. Integrates with microservices network."

inputs:
  host:
    description: "VPS hostname or IP"
    required: true
  user:
    description: "SSH username"
    required: true
  port:
    description: "SSH port"
    required: false
    default: "22"
  nginx_container_name:
    description: "Name for the nginx container"
    required: false
    default: "nginx_proxy"
  http_port:
    description: "HTTP port to expose"
    required: false
    default: "80"
  https_port:
    description: "HTTPS port to expose"
    required: false
    default: "443"
  default_server_name:
    description: "Default server name for nginx (e.g., your domain)"
    required: false
    default: "_"

runs:
  using: "composite"
  steps:
    - name: Copy Config Templates to Runner
      shell: bash
      run: |
        mkdir -p /tmp/nginx-templates
        cp "${{ github.action_path }}/nginx.conf.template" /tmp/nginx-templates/
        cp "${{ github.action_path }}/default.conf.template" /tmp/nginx-templates/

    - name: Transfer Templates to VPS
      shell: bash
      run: |
        echo "üìù Copying nginx configuration templates to VPS..."
        scp -i ~/.ssh/id_rsa -P "${{ inputs.port }}" -o StrictHostKeyChecking=no -o LogLevel=ERROR \
          /tmp/nginx-templates/nginx.conf.template \
          "${{ inputs.user }}@${{ inputs.host }}:/tmp/nginx.conf.template"
        scp -i ~/.ssh/id_rsa -P "${{ inputs.port }}" -o StrictHostKeyChecking=no -o LogLevel=ERROR \
          /tmp/nginx-templates/default.conf.template \
          "${{ inputs.user }}@${{ inputs.host }}:/tmp/default.conf.template"

    - name: Setup Nginx Container
      shell: bash
      env:
        NGINX_CONTAINER: "${{ inputs.nginx_container_name }}"
        HTTP_PORT: "${{ inputs.http_port }}"
        HTTPS_PORT: "${{ inputs.https_port }}"
        DEFAULT_SERVER: "${{ inputs.default_server_name }}"
      run: |
        ssh -i ~/.ssh/id_rsa -p "${{ inputs.port }}" \
          -o StrictHostKeyChecking=no -o IdentitiesOnly=yes -o LogLevel=ERROR -T \
          "${{ inputs.user }}@${{ inputs.host }}" \
          "NGINX_CONTAINER='$NGINX_CONTAINER' HTTP_PORT='$HTTP_PORT' HTTPS_PORT='$HTTPS_PORT' DEFAULT_SERVER='$DEFAULT_SERVER' bash -s" <<-'EOF'
          set -euo pipefail

          echo "üåê Setting up Nginx reverse proxy..."

          NETWORK_NAME="microservices"
          NGINX_CONFIG_DIR="/opt/nginx"
          NGINX_SITES_DIR="$NGINX_CONFIG_DIR/sites-enabled"
          NGINX_SSL_DIR="$NGINX_CONFIG_DIR/ssl"

          # Check if microservices network exists
          if ! sudo docker network ls --format '{{.Name}}' | grep -q "^${NETWORK_NAME}$"; then
            echo "‚ùå Microservices network not found. Please run setup-vps-docker-postgres first."
            exit 1
          fi

          # Create nginx configuration directories on host
          echo "üìÅ Creating nginx configuration directories..."
          sudo mkdir -p "$NGINX_CONFIG_DIR" "$NGINX_SITES_DIR" "$NGINX_SSL_DIR"
          sudo chmod 755 "$NGINX_CONFIG_DIR" "$NGINX_SITES_DIR" "$NGINX_SSL_DIR"

          # Move templates from /tmp to nginx config directory
          echo "üìù Installing nginx configuration files..."
          sudo mv /tmp/nginx.conf.template "$NGINX_CONFIG_DIR/nginx.conf"
          sudo mv /tmp/default.conf.template "$NGINX_SITES_DIR/default.conf"

          # Clean up old-style service configs that use upstream blocks
          echo "üßπ Checking for old-style service configurations..."
          for conf_file in "$NGINX_SITES_DIR"/service-*.conf; do
            if [ -f "$conf_file" ] && grep -q "^upstream " "$conf_file"; then
              echo "‚ö†Ô∏è  Found old-style config: $(basename "$conf_file")"
              echo "    This config uses 'upstream' blocks which cause startup failures."
              echo "    Please recreate this service using configure-nginx-service action."
              echo "    For now, backing up and removing: $conf_file"
              sudo mv "$conf_file" "${conf_file}.old" || true
            fi
          done

          # Stop and remove existing nginx container if it exists
          if sudo docker ps -a --format '{{.Names}}' | grep -q "^${NGINX_CONTAINER}$"; then
            echo "üõë Stopping existing nginx container..."
            sudo docker stop "$NGINX_CONTAINER" || true
            echo "üóë Removing existing nginx container..."
            sudo docker rm "$NGINX_CONTAINER" || true
          fi

          # Pull latest nginx image
          echo "üì¶ Pulling nginx Docker image..."
          sudo docker pull nginx:alpine

          # Start nginx container
          echo "üöÄ Starting nginx container..."
          sudo docker run -d \
            --name "$NGINX_CONTAINER" \
            --network "$NETWORK_NAME" \
            --restart unless-stopped \
            -p "${HTTP_PORT}:80" \
            -p "${HTTPS_PORT}:443" \
            -v "$NGINX_CONFIG_DIR/nginx.conf:/etc/nginx/nginx.conf:ro" \
            -v "$NGINX_SITES_DIR:/etc/nginx/sites-enabled:ro" \
            -v "$NGINX_SSL_DIR:/etc/nginx/ssl:ro" \
            -v "/etc/letsencrypt:/etc/nginx/letsencrypt:ro" \
            nginx:alpine

          echo "‚úÖ Nginx container started successfully!"
          echo "üìã Container details:"
          echo "   Name: $NGINX_CONTAINER"
          echo "   Network: $NETWORK_NAME"
          echo "   HTTP Port: $HTTP_PORT"
          echo "   HTTPS Port: $HTTPS_PORT"
          echo "   Config Directory: $NGINX_CONFIG_DIR"
        EOF

    - name: Configure UFW Firewall
      shell: bash
      env:
        HTTP_PORT: "${{ inputs.http_port }}"
        HTTPS_PORT: "${{ inputs.https_port }}"
      run: |
        echo "üî• Configuring UFW firewall for nginx..."
        ssh -i ~/.ssh/id_rsa -p "${{ inputs.port }}" \
          -o StrictHostKeyChecking=no -o IdentitiesOnly=yes -o LogLevel=ERROR -T \
          "${{ inputs.user }}@${{ inputs.host }}" \
          "HTTP_PORT='$HTTP_PORT' HTTPS_PORT='$HTTPS_PORT' bash -s" <<-'EOF'
          set -euo pipefail

          echo "üîì Opening HTTP port $HTTP_PORT..."
          sudo ufw allow "$HTTP_PORT/tcp" || echo "Failed to open HTTP port"

          echo "üîì Opening HTTPS port $HTTPS_PORT..."
          sudo ufw allow "$HTTPS_PORT/tcp" || echo "Failed to open HTTPS port"

          echo "üìä Current UFW status:"
          sudo ufw status | grep -E "(80|443|$HTTP_PORT|$HTTPS_PORT)" || echo "No HTTP/HTTPS rules found"

          echo "‚úÖ Firewall configured for nginx"
        EOF

    - name: Health Check and Validation
      shell: bash
      env:
        NGINX_CONTAINER: "${{ inputs.nginx_container_name }}"
        HTTP_PORT: "${{ inputs.http_port }}"
      run: |
        echo "üè• Performing nginx health checks..."
        ssh -i ~/.ssh/id_rsa -p "${{ inputs.port }}" \
          -o StrictHostKeyChecking=no -o IdentitiesOnly=yes -o LogLevel=ERROR -T \
          "${{ inputs.user }}@${{ inputs.host }}" \
          "NGINX_CONTAINER='$NGINX_CONTAINER' HTTP_PORT='$HTTP_PORT' bash -s" <<-'EOF'
          set -euo pipefail

          # Wait for container to be ready
          echo "‚è≥ Waiting for nginx container to start..."
          for i in $(seq 1 30); do
            container_status=$(sudo docker inspect -f '{{.State.Status}}' "$NGINX_CONTAINER" 2>/dev/null || echo "none")
            if [ "$container_status" = "running" ]; then
              echo "‚úÖ Nginx container is running"
              break
            elif [ "$container_status" = "exited" ]; then
              echo "‚ùå Nginx container exited unexpectedly. Logs:"
              sudo docker logs --tail=20 "$NGINX_CONTAINER" || true
              exit 1
            fi
            echo "üîÑ Waiting for container... ($i/30) Status: $container_status"
            sleep 2
          done

          # Test nginx configuration
          echo "üîç Testing nginx configuration..."
          if sudo docker exec "$NGINX_CONTAINER" nginx -t 2>&1; then
            echo "‚úÖ Nginx configuration is valid"
          else
            echo "‚ùå Nginx configuration test failed"
            echo "üìã Nginx configuration details:"
            sudo docker exec "$NGINX_CONTAINER" cat /etc/nginx/nginx.conf || true
            echo "üìÅ Sites-enabled directory contents:"
            sudo docker exec "$NGINX_CONTAINER" ls -la /etc/nginx/sites-enabled/ || true
            echo "üìù Container logs:"
            sudo docker logs --tail=20 "$NGINX_CONTAINER" || true
            exit 1
          fi

          # Test health endpoint
          echo "ü©∫ Testing health endpoint..."
          sleep 3  # Give nginx a moment to fully start

          VPS_IP=$(hostname -I | awk '{print $1}')
          for i in $(seq 1 10); do
            if curl -f -s "http://localhost:$HTTP_PORT/nginx-health" > /dev/null 2>&1; then
              echo "‚úÖ Health endpoint responding on localhost"
              break
            elif curl -f -s "http://$VPS_IP:$HTTP_PORT/nginx-health" > /dev/null 2>&1; then
              echo "‚úÖ Health endpoint responding on VPS IP"
              break
            fi
            echo "üîÑ Waiting for health endpoint... ($i/10)"
            sleep 2
          done

          # Show container status and logs
          echo "üìä Final nginx status:"
          sudo docker ps --filter "name=$NGINX_CONTAINER" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

          echo "üìù Recent nginx logs:"
          sudo docker logs --tail=10 "$NGINX_CONTAINER" || true

          echo "üéâ Nginx setup completed successfully!"
          echo ""
          echo "üìã Next steps:"
          echo "   1. Use configure-nginx-service action to add your services"
          echo "   2. Configure SSL certificates if needed"
          echo "   3. Test your service routing"
          echo ""
          echo "üí° Health check: http://$VPS_IP:$HTTP_PORT/nginx-health"
        EOF