name: Check & Install Docker on VPS

on:
  workflow_dispatch:  # Allows manual trigger from GitHub Actions

jobs:
  check-install-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Setup SSH Key üîë
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Connect to VPS & Check Docker
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            echo "‚úÖ Connected to VPS: $(hostname)"

            if ! command -v docker &> /dev/null; then
              echo "‚ùå Docker is not installed. Installing now..."
              
              sudo apt update
              sudo apt install -y docker.io
              sudo systemctl enable --now docker
              
              echo "‚úÖ Docker installed: $(docker --version)"
            else
              echo "‚úÖ Docker is already installed: $(docker --version)"
            fi
          EOF

      - name: Check & Install PostgreSQL in Docker (Secure)
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            bash -s -- \
            "${{ secrets.POSTGRES_TAXI_LAGUNA_DB_NAME }}" \
            "${{ secrets.POSTGRES_TAXI_LAGUNA_DB_USER }}" \
            "${{ secrets.POSTGRES_TAXI_LAGUNA_DB_PASS }}" \
            "${{ secrets.POSTGRES_ALIX_DB_NAME }}" \
            "${{ secrets.POSTGRES_ALIX_DB_USER }}" \
            "${{ secrets.POSTGRES_ALIX_DB_PASS }}" \
            "${{ secrets.POSTGRES_ADMIN_USER }}" \
            "${{ secrets.POSTGRES_ADMIN_PASS }}" << 'EOF'
            
            POSTGRES_TAXI_LAGUNA_DB_NAME=$1
            POSTGRES_TAXI_LAGUNA_DB_USER=$2
            POSTGRES_TAXI_LAGUNA_DB_PASS=$3
            POSTGRES_ALIX_DB_NAME=$4
            POSTGRES_ALIX_DB_USER=$5
            POSTGRES_ALIX_DB_PASS=$6
            POSTGRES_ADMIN_USER=$7
            POSTGRES_ADMIN_PASS=$8

            echo "üîé Checking PostgreSQL in Docker..."

            if ! docker ps --format '{{.Names}}' | grep -q postgres_container; then
              echo "‚ùå PostgreSQL is not running. Installing..."

              # Pull PostgreSQL image
              docker pull postgres:latest

              # Create an init script to wait for PostgreSQL to start and then initialize the databases
              echo "#!/bin/bash" > init-db.sh
              echo "set -e" >> init-db.sh
              echo "" >> init-db.sh
              echo "# Wait for PostgreSQL to be ready before starting the initialization" >> init-db.sh
              echo "until psql -U \"\$POSTGRES_USER\" -c '\l'; do" >> init-db.sh
              echo "  echo \"Waiting for PostgreSQL to start...\"" >> init-db.sh
              echo "  sleep 2" >> init-db.sh
              echo "done" >> init-db.sh
              echo "" >> init-db.sh
              echo "# Create the databases and users" >> init-db.sh
              echo "psql -v ON_ERROR_STOP=1 --username \"\$POSTGRES_USER\" <<EOSQL" >> init-db.sh
              echo "CREATE DATABASE \"\$POSTGRES_TAXI_LAGUNA_DB_NAME\";" >> init-db.sh
              echo "CREATE USER \"\$POSTGRES_TAXI_LAGUNA_DB_USER\" WITH ENCRYPTED PASSWORD '\$POSTGRES_TAXI_LAGUNA_DB_PASS';" >> init-db.sh
              echo "GRANT ALL PRIVILEGES ON DATABASE \"\$POSTGRES_TAXI_LAGUNA_DB_NAME\" TO \"\$POSTGRES_TAXI_LAGUNA_DB_USER\";" >> init-db.sh
              echo "" >> init-db.sh
              echo "CREATE DATABASE \"\$POSTGRES_ALIX_DB_NAME\";" >> init-db.sh
              echo "CREATE USER \"\$POSTGRES_ALIX_DB_USER\" WITH ENCRYPTED PASSWORD '\$POSTGRES_ALIX_DB_PASS';" >> init-db.sh
              echo "GRANT ALL PRIVILEGES ON DATABASE \"\$POSTGRES_ALIX_DB_NAME\" TO \"\$POSTGRES_ALIX_DB_USER\";" >> init-db.sh
              echo "EOSQL" >> init-db.sh

              chmod +x init-db.sh

              # Run PostgreSQL with secrets and mount init-db.sh for initialization
              docker run -d \
                --name postgres_container \
                -e POSTGRES_USER=$POSTGRES_ADMIN_USER \
                -e POSTGRES_PASSWORD=$POSTGRES_ADMIN_PASS \
                -e POSTGRES_DB=defaultdb \
                -p 5432:5432 \
                -v postgres_data:/var/lib/postgresql/data \
                -v $(pwd)/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh \
                --restart always \
                postgres:latest

              echo "‚úÖ PostgreSQL installed and running with multiple databases!"
            else
              echo "‚úÖ PostgreSQL is already running!"
            fi

            # Open port 5432
            sudo ufw allow 5432/tcp
            echo "‚úÖ Port 5432 is open for PostgreSQL!"
          EOF

      - name: Configure PostgreSQL for Limited Remote Access üåç
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            bash -s -- "${{ secrets.ALLOWED_IPS }}" << 'EOF'
            
            ALLOWED_IPS=$1

            echo "üîé Checking PostgreSQL remote access settings..."

            # Enable remote connections in postgresql.conf
            docker exec postgres_container bash -c "grep -q '^listen_addresses' /var/lib/postgresql/data/postgresql.conf || echo \"listen_addresses = '*'\" >> /var/lib/postgresql/data/postgresql.conf"

            # Loop through the ALLOWED_IPS variable and add entries to pg_hba.conf
            IFS=',' read -r -a ip_array <<< "$ALLOWED_IPS"
            for ip in "\${ip_array[@]}"; do
              if [[ \$ip =~ / ]]; then
                # It's already in CIDR format
                docker exec postgres_container bash -c "grep -q '^host all all \$ip' /var/lib/postgresql/data/pg_hba.conf || echo \"host all all \$ip md5\" >> /var/lib/postgresql/data/pg_hba.conf"
              else
                # It's a single IP, use /32
                docker exec postgres_container bash -c "grep -q '^host all all \$ip/32' /var/lib/postgresql/data/pg_hba.conf || echo \"host all all \$ip/32 md5\" >> /var/lib/postgresql/data/pg_hba.conf"
              fi
            done

            # Restart PostgreSQL to apply changes
            docker restart postgres_container

            # Check for any errors in container logs
            docker logs postgres_container || true
            echo "‚úÖ PostgreSQL is now accessible only from the specified IPs!"

            # Ensure firewall allows connections only from these IPs
            for ip in "\${ip_array[@]}"; do
              sudo ufw allow from \$ip to any port 5432 proto tcp
            done

            # Reload UFW to apply changes
            sudo ufw reload
            echo "‚úÖ Firewall updated to allow PostgreSQL access from only the allowed IPs!"
          EOF
