name: Check & Install Docker on VPS

on:
  workflow_dispatch:  # Allows manual trigger from GitHub Actions

jobs:
  check-install-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Setup SSH Key üîë
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Connect to VPS & Check Docker
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            echo "‚úÖ Connected to VPS: $(hostname)"
            if ! command -v docker &> /dev/null; then
              echo "‚ùå Docker is not installed. Installing now..."
              sudo apt update
              sudo apt install -y docker.io
              sudo systemctl enable --now docker
              echo "‚úÖ Docker installed: $(docker --version)"
            else
              echo "‚úÖ Docker is already installed: $(docker --version)"
            fi
          EOF

      - name: Check & Install PostgreSQL in Docker (Secure)
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            bash -s -- \
            "${{ secrets.POSTGRES_ADMIN_USER }}" \
            "${{ secrets.POSTGRES_ADMIN_PASS }}" << 'EOF'

            POSTGRES_ADMIN_USER=$1
            POSTGRES_ADMIN_PASS=$2

            echo "üîé Checking PostgreSQL in Docker..."

            if ! docker ps --format '{{.Names}}' | grep -q postgres_container; then
              echo "‚ùå PostgreSQL is not running. Installing..."
              docker pull postgres:latest
              docker run -d \
                --name postgres_container \
                -e POSTGRES_USER=$POSTGRES_ADMIN_USER \
                -e POSTGRES_PASSWORD=$POSTGRES_ADMIN_PASS \
                -e POSTGRES_DB=postgres \
                -p 5432:5432 \
                -v postgres_data:/var/lib/postgresql/data \
                --restart always \
                postgres:latest
              echo "‚úÖ PostgreSQL installed and running with admin user only!"
            else
              echo "‚úÖ PostgreSQL is already running!"
            fi

            sudo ufw allow 5432/tcp
            echo "‚úÖ Port 5432 is open for PostgreSQL!"
          EOF

      - name: Check PostgreSQL Connection
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            bash -s -- "${{ secrets.POSTGRES_ADMIN_USER }}" << 'EOF'

            POSTGRES_ADMIN_USER=$1
            echo "‚è≥ Checking PostgreSQL connection..."
            MAX_RETRIES=10
            RETRY_INTERVAL=2
            COUNT=0
            until docker exec postgres_container pg_isready -U "$POSTGRES_ADMIN_USER" || [ $COUNT -eq $MAX_RETRIES ]; do
              echo "üîÑ Waiting for PostgreSQL to be ready... ($COUNT/$MAX_RETRIES)"
              sleep $RETRY_INTERVAL
              COUNT=$((COUNT+1))
            done
            if [ $COUNT -eq $MAX_RETRIES ]; then
              echo "‚ùå PostgreSQL did not become ready in time. Exiting..."
              exit 1
            fi
            echo "‚úÖ PostgreSQL is ready and accepting connections!"
          EOF

      - name: Enable UFW Firewall üî•
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            echo "üîß Enabling UFW Firewall..."
            sudo ufw allow OpenSSH
            sudo ufw --force enable
            echo "‚úÖ UFW Firewall is now enabled!"
          EOF

      - name: Configure PostgreSQL for Limited Remote Access üåç
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            ALLOWED_IPS=$1
            echo "üîé Checking PostgreSQL remote access settings..."
            docker exec postgres_container bash -c "sed -i '/^#listen_addresses =/c\listen_addresses = '\''*'\'' ' /var/lib/postgresql/data/postgresql.conf"
            docker exec postgres_container bash -c "touch /var/lib/postgresql/data/pg_hba.conf && chown postgres:postgres /var/lib/postgresql/data/pg_hba.conf"
            IFS=',' read -r -a ip_array <<< "$ALLOWED_IPS"
            for ip in "${ip_array[@]}"; do
              echo "‚û° Adding IP: $ip to pg_hba.conf"
              docker exec postgres_container bash -c "echo 'host all all $ip/32 md5' >> /var/lib/postgresql/data/pg_hba.conf"
            done
            docker exec postgres_container bash -c "chmod 600 /var/lib/postgresql/data/pg_hba.conf && chown postgres:postgres /var/lib/postgresql/data/pg_hba.conf"
            docker exec postgres_container psql -U postgres -c "SELECT pg_reload_conf();"
            echo "üîé Allowed IPs from pg_hba.conf:"
            docker exec postgres_container grep "^host" /var/lib/postgresql/data/pg_hba.conf
            echo "‚úÖ PostgreSQL is now accessible only from the specified IPs!"
            echo "üîé Verifying PostgreSQL is listening on correct interfaces..."
            docker exec postgres_container psql -U postgres -c "SHOW listen_addresses;"
            echo "üîé Checking firewall rules..."
            sudo ufw status | grep 5432
          EOF
