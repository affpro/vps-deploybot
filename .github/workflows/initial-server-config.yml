name: Check & Install Docker on VPS

on:
  workflow_dispatch:  # Allows manual trigger from GitHub Actions

jobs:
  check-install-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Setup SSH Key üîë
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Connect to VPS & Check Docker
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            echo "‚úÖ Connected to VPS: $(hostname)"

            if ! command -v docker &> /dev/null; then
              echo "‚ùå Docker is not installed. Installing now..."
              
              sudo apt update
              sudo apt install -y docker.io
              sudo systemctl enable --now docker
              
              echo "‚úÖ Docker installed: $(docker --version)"
            else
              echo "‚úÖ Docker is already installed: $(docker --version)"
            fi
          EOF

      - name: Check & Install PostgreSQL in Docker (Secure)
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            bash -s -- \
            "${{ secrets.POSTGRES_TAXI_LAGUNA_DB_NAME }}" \
            "${{ secrets.POSTGRES_TAXI_LAGUNA_DB_USER }}" \
            "${{ secrets.POSTGRES_TAXI_LAGUNA_DB_PASS }}" \
            "${{ secrets.POSTGRES_ALIX_DB_NAME }}" \
            "${{ secrets.POSTGRES_ALIX_DB_USER }}" \
            "${{ secrets.POSTGRES_ALIX_DB_PASS }}" \
            "${{ secrets.POSTGRES_ADMIN_USER }}" \
            "${{ secrets.POSTGRES_ADMIN_PASS }}" << 'EOF'
            
            POSTGRES_TAXI_LAGUNA_DB_NAME=$1
            POSTGRES_TAXI_LAGUNA_DB_USER=$2
            POSTGRES_TAXI_LAGUNA_DB_PASS=$3
            POSTGRES_ALIX_DB_NAME=$4
            POSTGRES_ALIX_DB_USER=$5
            POSTGRES_ALIX_DB_PASS=$6
            POSTGRES_ADMIN_USER=$7
            POSTGRES_ADMIN_PASS=$8

            echo "üîé Checking PostgreSQL in Docker..."

            if ! docker ps --format '{{.Names}}' | grep -q postgres_container; then
              echo "‚ùå PostgreSQL is not running. Installing..."
  
              # Pull PostgreSQL image
              docker pull postgres:latest

              # Create an init script properly
              cat > init-db.sh <<EOL
              #!/bin/bash
              set -e
              psql -v ON_ERROR_STOP=1 --username "\$POSTGRES_USER" <<EOSQL
                CREATE DATABASE $POSTGRES_TAXI_LAGUNA_DB_NAME;
                CREATE USER $POSTGRES_TAXI_LAGUNA_DB_USER WITH ENCRYPTED PASSWORD '$POSTGRES_TAXI_LAGUNA_DB_PASS';
                GRANT ALL PRIVILEGES ON DATABASE $POSTGRES_TAXI_LAGUNA_DB_NAME TO $POSTGRES_TAXI_LAGUNA_DB_USER;

                CREATE DATABASE $POSTGRES_ALIX_DB_NAME;
                CREATE USER $POSTGRES_ALIX_DB_USER WITH ENCRYPTED PASSWORD '$POSTGRES_ALIX_DB_PASS';
                GRANT ALL PRIVILEGES ON DATABASE $POSTGRES_ALIX_DB_NAME TO $POSTGRES_ALIX_DB_USER;
              EOSQL
              EOL

              chmod +x init-db.sh

              # Run PostgreSQL with secrets
              docker run -d \
                --name postgres_container \
                -e POSTGRES_USER=$POSTGRES_ADMIN_USER \
                -e POSTGRES_PASSWORD=$POSTGRES_ADMIN_PASS \
                -e POSTGRES_DB=defaultdb \
                -p 5432:5432 \
                -v postgres_data:/var/lib/postgresql/data \
                -v $(pwd)/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh \
                --restart always \
                postgres:latest

              echo "‚úÖ PostgreSQL installed and running with multiple databases!"
            else
              echo "‚úÖ PostgreSQL is already running!"
            fi

            # Open port 5432
            sudo ufw allow 5432/tcp
            echo "‚úÖ Port 5432 is open for PostgreSQL!"
          EOF
