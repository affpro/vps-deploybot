name: Setup Microservice PostgreSQL Database
description: "Create dedicated database and user for microservice with proper permissions. Requires existing PostgreSQL container and SSH setup."

inputs:
  host:
    description: "VPS hostname or IP"
    required: true
  user:
    description: "SSH username"
    required: true
  port:
    description: "SSH port"
    required: false
    default: "22"
  postgres_admin_user:
    description: "PostgreSQL admin username"
    required: true
  postgres_admin_pass:
    description: "PostgreSQL admin password"
    required: true
  database_name:
    description: "Name of the database to create for the microservice"
    required: true
  database_user:
    description: "Username for the microservice database user"
    required: true
  database_password:
    description: "Password for the microservice database user"
    required: true

runs:
  using: "composite"
  steps:
    - name: Create Microservice Database and User
      shell: bash
      env:
        POSTGRES_ADMIN_USER: "${{ inputs.postgres_admin_user }}"
        POSTGRES_ADMIN_PASS: "${{ inputs.postgres_admin_pass }}"
        DATABASE_NAME: "${{ inputs.database_name }}"
        DATABASE_USER: "${{ inputs.database_user }}"
        DATABASE_PASS: "${{ inputs.database_password }}"
      run: |
        ssh -i ~/.ssh/id_rsa -p "${{ inputs.port }}" \
          -o StrictHostKeyChecking=no -o IdentitiesOnly=yes -o LogLevel=ERROR -T \
          "${{ inputs.user }}@${{ inputs.host }}" \
          "POSTGRES_ADMIN_USER='$POSTGRES_ADMIN_USER' POSTGRES_ADMIN_PASS='$POSTGRES_ADMIN_PASS' DATABASE_NAME='$DATABASE_NAME' DATABASE_USER='$DATABASE_USER' DATABASE_PASS='$DATABASE_PASS' bash -s" << 'EOF'
          set -euo pipefail

          CONTAINER=postgres_container

          echo "🔍 Checking PostgreSQL container status..."
          if ! sudo docker ps --format '{{.Names}}' | grep -q "^${CONTAINER}$"; then
            echo "❌ PostgreSQL container is not running. Please run setup-vps-docker-postgres first."
            exit 1
          fi

          echo "🗄️ Checking database and user for microservice..."
          echo "Database: $DATABASE_NAME"
          echo "User: $DATABASE_USER"

          # Check if database exists
          db_exists=$(sudo docker exec -e PGPASSWORD="$POSTGRES_ADMIN_PASS" "$CONTAINER" \
            psql -U "$POSTGRES_ADMIN_USER" -h 127.0.0.1 -d postgres \
            -tAc "SELECT 1 FROM pg_database WHERE datname='$DATABASE_NAME';" || echo "")

          # Check if user exists
          user_exists=$(sudo docker exec -e PGPASSWORD="$POSTGRES_ADMIN_PASS" "$CONTAINER" \
            psql -U "$POSTGRES_ADMIN_USER" -h 127.0.0.1 -d postgres \
            -tAc "SELECT 1 FROM pg_roles WHERE rolname='$DATABASE_USER';" || echo "")

          # Skip creation if both exist, but still check pg_hba.conf
          if [ -n "$db_exists" ] && [ -n "$user_exists" ]; then
            echo "✅ Database '$DATABASE_NAME' and user '$DATABASE_USER' already exist - skipping creation"
            echo "📋 Existing setup:"
            echo "   Database: $DATABASE_NAME"
            echo "   Username: $DATABASE_USER"
            echo "   Host: localhost (or VPS IP for remote)"
            echo "   Port: 5432"

            # Check and fix pg_hba.conf for existing user
            echo "🔐 Checking pg_hba.conf entries for existing user..."
            if ! sudo docker exec "$CONTAINER" grep -q "^host.*$DATABASE_USER" /var/lib/postgresql/data/pg_hba.conf; then
              echo "🔐 Adding missing pg_hba.conf entries..."
              VPS_IP=$(hostname -I | awk '{print $1}')
              echo "Detected VPS IP: $VPS_IP"

              sudo docker exec "$CONTAINER" bash -c \
                "echo 'host all $DATABASE_USER 127.0.0.1/32 md5' >> /var/lib/postgresql/data/pg_hba.conf"
              sudo docker exec "$CONTAINER" bash -c \
                "echo 'host all $DATABASE_USER $VPS_IP/32 md5' >> /var/lib/postgresql/data/pg_hba.conf"

              echo "🔄 Reloading PostgreSQL configuration..."
              sudo docker restart "$CONTAINER"

              # Wait for PostgreSQL to be ready after restart
              echo "⏳ Waiting for PostgreSQL to be ready after restart..."
              for i in $(seq 1 30); do
                if sudo docker exec "$CONTAINER" pg_isready -U "$POSTGRES_ADMIN_USER" -d postgres -h 127.0.0.1 >/dev/null 2>&1; then
                  echo "✅ PostgreSQL is ready after restart."
                  break
                fi
                echo "🔄 Waiting for restart... ($i/30)"
                sleep 2
              done
            else
              echo "✅ pg_hba.conf entries already exist for user"
            fi

            # Continue to connection test instead of exiting
          fi

          # Create user if it doesn't exist
          if [ -z "$user_exists" ]; then
            echo "👤 Creating database user: $DATABASE_USER"
            sudo docker exec -e PGPASSWORD="$POSTGRES_ADMIN_PASS" "$CONTAINER" \
              psql -U "$POSTGRES_ADMIN_USER" -h 127.0.0.1 -d postgres \
              -c "CREATE USER \"$DATABASE_USER\" WITH PASSWORD '$DATABASE_PASS';"
          else
            echo "👤 User $DATABASE_USER already exists - skipping user creation"
          fi

          # Create database if it doesn't exist
          if [ -z "$db_exists" ]; then
            echo "🗄️ Creating database: $DATABASE_NAME"
            sudo docker exec -e PGPASSWORD="$POSTGRES_ADMIN_PASS" "$CONTAINER" \
              psql -U "$POSTGRES_ADMIN_USER" -h 127.0.0.1 -d postgres \
              -c "CREATE DATABASE \"$DATABASE_NAME\" OWNER \"$DATABASE_USER\";"

            # Grant necessary privileges only for new database
            echo "🔐 Setting up database permissions..."
            sudo docker exec -e PGPASSWORD="$POSTGRES_ADMIN_PASS" "$CONTAINER" \
              psql -U "$POSTGRES_ADMIN_USER" -h 127.0.0.1 -d postgres \
              -c "GRANT ALL PRIVILEGES ON DATABASE \"$DATABASE_NAME\" TO \"$DATABASE_USER\";"

            # Connect to the new database and grant schema permissions
            sudo docker exec -e PGPASSWORD="$POSTGRES_ADMIN_PASS" "$CONTAINER" \
              psql -U "$POSTGRES_ADMIN_USER" -h 127.0.0.1 -d "$DATABASE_NAME" \
              -c "GRANT ALL ON SCHEMA public TO \"$DATABASE_USER\";"

            sudo docker exec -e PGPASSWORD="$POSTGRES_ADMIN_PASS" "$CONTAINER" \
              psql -U "$POSTGRES_ADMIN_USER" -h 127.0.0.1 -d "$DATABASE_NAME" \
              -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO \"$DATABASE_USER\";"

            sudo docker exec -e PGPASSWORD="$POSTGRES_ADMIN_PASS" "$CONTAINER" \
              psql -U "$POSTGRES_ADMIN_USER" -h 127.0.0.1 -d "$DATABASE_NAME" \
              -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO \"$DATABASE_USER\";"
          else
            echo "🗄️ Database $DATABASE_NAME already exists - skipping database creation"
          fi

          # Add pg_hba.conf entry for newly created users only
          if [ -z "$user_exists" ] && [ -z "$db_exists" ]; then
            echo "🔐 Adding pg_hba.conf entries for new microservice user..."

            # Get the VPS IP address for pg_hba.conf entry
            VPS_IP=$(hostname -I | awk '{print $1}')
            echo "Detected VPS IP: $VPS_IP"

            # Add entries for both localhost and VPS IP
            sudo docker exec "$CONTAINER" bash -c \
              "echo 'host all $DATABASE_USER 127.0.0.1/32 md5' >> /var/lib/postgresql/data/pg_hba.conf"
            sudo docker exec "$CONTAINER" bash -c \
              "echo 'host all $DATABASE_USER $VPS_IP/32 md5' >> /var/lib/postgresql/data/pg_hba.conf"

            echo "🔄 Reloading PostgreSQL configuration..."
            sudo docker restart "$CONTAINER"

            # Wait for PostgreSQL to be ready after restart
            echo "⏳ Waiting for PostgreSQL to be ready after restart..."
            for i in $(seq 1 30); do
              if sudo docker exec "$CONTAINER" pg_isready -U "$POSTGRES_ADMIN_USER" -d postgres -h 127.0.0.1 >/dev/null 2>&1; then
                echo "✅ PostgreSQL is ready after restart."
                break
              fi
              echo "🔄 Waiting for restart... ($i/30)"
              sleep 2
            done
          fi

          echo "✅ Database setup completed successfully!"
          echo "📋 Connection details:"
          echo "   Database: $DATABASE_NAME"
          echo "   Username: $DATABASE_USER"
          echo "   Host: localhost (or VPS IP for remote)"
          echo "   Port: 5432"

        EOF

    - name: Test Database Connection
      shell: bash
      env:
        POSTGRES_ADMIN_USER: "${{ inputs.postgres_admin_user }}"
        POSTGRES_ADMIN_PASS: "${{ inputs.postgres_admin_pass }}"
        DATABASE_NAME: "${{ inputs.database_name }}"
        DATABASE_USER: "${{ inputs.database_user }}"
        DATABASE_PASS: "${{ inputs.database_password }}"
      run: |
        echo "🧪 Testing database connection..."
        ssh -i ~/.ssh/id_rsa -p "${{ inputs.port }}" \
          -o StrictHostKeyChecking=no \
          "${{ inputs.user }}@${{ inputs.host }}" \
          "POSTGRES_ADMIN_USER='$POSTGRES_ADMIN_USER' POSTGRES_ADMIN_PASS='$POSTGRES_ADMIN_PASS' DATABASE_NAME='$DATABASE_NAME' DATABASE_USER='$DATABASE_USER' DATABASE_PASS='$DATABASE_PASS' bash -s" << 'EOF'
          set -euo pipefail

          CONTAINER=postgres_container

          echo "🔌 Testing connection as microservice user..."
          echo "Attempting to connect to database '$DATABASE_NAME' as user '$DATABASE_USER'..."

          # Test with verbose output for debugging
          connection_result=$(sudo docker exec -e PGPASSWORD="$DATABASE_PASS" "$CONTAINER" \
            psql -U "$DATABASE_USER" -h 127.0.0.1 -d "$DATABASE_NAME" \
            -c "SELECT current_database(), current_user, now();" 2>&1 || echo "CONNECTION_FAILED")

          if echo "$connection_result" | grep -q "CONNECTION_FAILED"; then
            echo "❌ Database connection test failed!"
            echo "🔍 Error details:"
            echo "$connection_result"

            echo "🔍 Checking user permissions (using admin credentials)..."
            sudo docker exec -e PGPASSWORD="$POSTGRES_ADMIN_PASS" "$CONTAINER" \
              psql -U "$POSTGRES_ADMIN_USER" -h 127.0.0.1 -d postgres \
              -c "SELECT rolname, rolcanlogin FROM pg_roles WHERE rolname='$DATABASE_USER';" || true

            echo "🔍 Checking database ownership (using admin credentials)..."
            sudo docker exec -e PGPASSWORD="$POSTGRES_ADMIN_PASS" "$CONTAINER" \
              psql -U "$POSTGRES_ADMIN_USER" -h 127.0.0.1 -d postgres \
              -c "SELECT datname, datdba FROM pg_database WHERE datname='$DATABASE_NAME';" || true

            echo "🔍 Checking pg_hba.conf entries..."
            sudo docker exec "$CONTAINER" grep -E "^host.*$DATABASE_USER" /var/lib/postgresql/data/pg_hba.conf || true

            exit 1
          else
            echo "✅ Database connection test successful!"
            echo "📋 Connection result:"
            echo "$connection_result"
            echo "🎉 Microservice database is ready for use!"
          fi
        EOF