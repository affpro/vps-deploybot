name: Check and install docker postgres image
description: "Check if PostgreSQL is installed in Docker, if not install it securely"

inputs:
  host:
    description: "VPS hostname or IP"
    required: true
  user:
    description: "SSH username"
    required: true
  port:
    description: "SSH port"
    required: false
    default: "22"
  postgres_admin_user: 
    description: "PostgreSQL admin username"
    required: true
  postgres_admin_pass:
    description: "PostgreSQL admin password"
    required: true
  postgres_port:
    description: "Public port for PostgreSQL"
    type: number
    required: true
    default: 5432
  allowed_ips:
    description: "Comma-separated list of IPs allowed to access PostgreSQL (e.g., '1.2.3.4,5.6.7.8'). Leave empty for local access only."
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Check & Install PostgreSQL in Docker (Secure)
      env:
        POSTGRES_ADMIN_USER: ${{ inputs.postgres_admin_user }}
        POSTGRES_ADMIN_PASS: ${{ inputs.postgres_admin_pass }}
        POSTGRES_PORT: ${{ inputs.postgres_port }}
      shell: bash
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ inputs.user }}@${{ inputs.host }} \
            bash -s -- \
            "${{ inputs.postgres_admin_user }}" \
            "${{ inputs.postgres_admin_pass }}" \
            "${{ inputs.allowed_ips }}" << 'EOF'

            POSTGRES_ADMIN_USER=$1
            POSTGRES_ADMIN_PASS=$2
            ALLOWED_IPS=$3

            echo "üîé Checking PostgreSQL in Docker..."

            CONTAINER=postgres_container
            IMAGE=postgres:16

            # Create shared network for microservices
            echo "üåê Creating shared microservices network..."
            if ! sudo docker network ls --format '{{.Name}}' | grep -q "^microservices$"; then
              sudo docker network create microservices
              echo "‚úÖ Created 'microservices' network"
            else
              echo "‚úÖ 'microservices' network already exists"
            fi

            echo "üîé Ensuring PostgreSQL container..."
            status=$(sudo docker inspect -f '{{.State.Status}}' "$CONTAINER" 2>/dev/null || echo "none")

            if [ "$status" = "running" ]; then
              echo "‚úÖ Container is running."
            elif [ "$status" = "restarting" ] || [ "$status" = "exited" ] || [ "$status" = "dead" ]; then
              echo "‚ÑπÔ∏è Container exists but state=$status. Showing logs:"
              sudo docker logs --tail=50 "$CONTAINER" || true
              echo "Attempting to start..."
              sudo docker start "$CONTAINER" || true
            else
              echo "‚ùå Container not found. Creating..."
              sudo docker pull "$IMAGE"
              sudo docker run -d \
                --name "$CONTAINER" \
                --network bridge \
                -e POSTGRES_USER="$POSTGRES_ADMIN_USER" \
                -e POSTGRES_PASSWORD="$POSTGRES_ADMIN_PASS" \
                -e POSTGRES_DB=postgres \
                -p 5432:5432 \
                -v postgres_data:/var/lib/postgresql/data \
                --health-cmd="pg_isready -U ${POSTGRES_ADMIN_USER} -d postgres || exit 1" \
                --health-interval=5s \
                --health-retries=20 \
                --health-timeout=5s \
                --health-start-period=10s \
                --restart always \
                "$IMAGE"
              echo "‚úÖ Container created with health checks."
            fi

            # Clean up existing UFW rules for PostgreSQL port 5432
            echo "üßπ Cleaning up existing UFW rules for PostgreSQL port 5432..."
            sudo ufw status numbered | grep "5432" | grep -o "^\[ *[0-9]* *\]" | sed 's/\[//;s/\]//' | sort -nr | while read -r rule_num; do
              [ -n "$rule_num" ] && echo "y" | sudo ufw delete "$rule_num" || true
            done

            # Configure firewall rules based on allowed IPs
            if [ -n "$ALLOWED_IPS" ]; then
              echo "üîß Configuring UFW rules for specific IPs..."
              IFS=',' read -r -a ip_array <<< "$ALLOWED_IPS"
              for ip in "${ip_array[@]}"; do
                ip=$(echo "$ip" | xargs)
                [ -z "$ip" ] && continue
                echo "‚û° Allowing PostgreSQL access from IP: $ip"
                sudo ufw allow from "$ip" to any port 5432 || echo "Failed to add rule for $ip"
              done
              echo "‚úÖ UFW rules configured for specified IPs only!"
            else
              echo "‚ÑπÔ∏è No allowed IPs specified - PostgreSQL accessible locally only"
            fi
        EOF
    - name: Check PostgreSQL Connection (robust)
      shell: bash
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ inputs.user }}@${{ inputs.host }} \
          bash -s -- "${{ inputs.postgres_admin_user }}" << 'EOF'
          set -euo pipefail
          POSTGRES_ADMIN_USER="$1"
          CONTAINER=postgres_container

          echo "‚è≥ Waiting for container to be running..."
          for i in $(seq 1 60); do
            state=$(sudo docker inspect -f '{{.State.Status}}' "$CONTAINER" 2>/dev/null || echo "none")
            health=$(sudo docker inspect -f '{{if .State.Health}}{{.State.Health.Status}}{{else}}none{{end}}' "$CONTAINER" 2>/dev/null || echo "none")

            if [ "$state" = "running" ]; then
              break
            fi

            if [ "$state" = "restarting" ] || [ "$state" = "exited" ] || [ "$state" = "dead" ]; then
              echo "‚ùå Container state: status=$state health=$health"
              echo "---- docker logs (last 50) ----"
              sudo docker logs --tail=50 "$CONTAINER" || true
              exit 1
            fi
            sleep 2
          done

          echo "‚è≥ Checking PostgreSQL readiness..."
          for i in $(seq 1 60); do
            if sudo docker exec "$CONTAINER" pg_isready -U "$POSTGRES_ADMIN_USER" -d postgres -h 127.0.0.1 >/dev/null 2>&1; then
              echo "‚úÖ PostgreSQL is ready."
              exit 0
            fi
            echo "üîÑ Waiting... ($i/60)"
            sleep 2
          done

          echo "‚ùå Timed out. Logs:"
          sudo docker logs --tail=50 "$CONTAINER" || true
          exit 1
        EOF
    - name: Configure PostgreSQL Remote Access
      shell: bash
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ inputs.user }}@${{ inputs.host }} \
          bash -s -- "${{ inputs.allowed_ips }}" "${{ inputs.postgres_admin_user }}" "${{ inputs.postgres_admin_pass }}" << 'EOF'
          set -euo pipefail
          ALLOWED_IPS="$1"
          POSTGRES_ADMIN_USER="$2"
          POSTGRES_ADMIN_PASS="$3"
          CONTAINER=postgres_container

          # Clean up existing pg_hba.conf host entries and configure fresh access
          echo "üßπ Cleaning up existing PostgreSQL host access entries..."
          sudo docker exec "$CONTAINER" bash -c \
            "cp /var/lib/postgresql/data/pg_hba.conf /var/lib/postgresql/data/pg_hba.conf.backup 2>/dev/null || true"

          # Remove all existing host entries (lines starting with 'host')
          sudo docker exec "$CONTAINER" bash -c \
            "sed -i '/^host /d' /var/lib/postgresql/data/pg_hba.conf"

          if [ -n "$ALLOWED_IPS" ]; then
            echo "üîé Configuring PostgreSQL for remote access: $ALLOWED_IPS"

            # Ensure listen_addresses='*' for remote connections
            sudo docker exec "$CONTAINER" bash -c \
              "sed -i \"s/^#*listen_addresses.*/listen_addresses = '*' /\" /var/lib/postgresql/data/postgresql.conf"

            # Ensure pg_hba.conf exists with correct permissions
            sudo docker exec "$CONTAINER" bash -c \
              "touch /var/lib/postgresql/data/pg_hba.conf && chown postgres:postgres /var/lib/postgresql/data/pg_hba.conf"

            # Add local host entry for admin user (needed for configuration commands)
            echo "‚û° Adding local access for admin user: $POSTGRES_ADMIN_USER"
            sudo docker exec "$CONTAINER" bash -c \
              "echo 'host all $POSTGRES_ADMIN_USER 127.0.0.1/32 md5' >> /var/lib/postgresql/data/pg_hba.conf"

            # Add host entries for each allowed IP
            IFS=',' read -r -a ip_array <<< "$ALLOWED_IPS"
            for ip in "${ip_array[@]}"; do
              ip=$(echo "$ip" | xargs)
              [ -z "$ip" ] && continue
              echo "‚û° Adding PostgreSQL access for IP: $ip"
              sudo docker exec "$CONTAINER" bash -c \
                "echo 'host all all $ip/32 md5' >> /var/lib/postgresql/data/pg_hba.conf"
            done

            # Restart PostgreSQL to apply configuration changes
            echo "üîÑ Restarting PostgreSQL to apply configuration changes..."
            sudo docker restart "$CONTAINER"

            # Wait for PostgreSQL to be ready after restart
            echo "‚è≥ Waiting for PostgreSQL to be ready after restart..."
            for i in $(seq 1 30); do
              if sudo docker exec "$CONTAINER" pg_isready -U "$POSTGRES_ADMIN_USER" -d postgres -h 127.0.0.1 >/dev/null 2>&1; then
                echo "‚úÖ PostgreSQL is ready after restart."
                break
              fi
              echo "üîÑ Waiting for restart... ($i/30)"
              sleep 2
            done

            echo "üîé Current PostgreSQL configuration:"
            echo "listen_addresses:"
            sudo docker exec -e PGPASSWORD="$POSTGRES_ADMIN_PASS" "$CONTAINER" psql -U "$POSTGRES_ADMIN_USER" -h 127.0.0.1 -d postgres -c "SHOW listen_addresses;" || true
            echo "Allowed host entries:"
            sudo docker exec "$CONTAINER" grep -E '^host ' /var/lib/postgresql/data/pg_hba.conf || true

            echo "‚úÖ PostgreSQL configured for remote access from specified IPs"
          else
            echo "üîí Configuring PostgreSQL for local access only..."
            # Set listen_addresses to localhost for local-only access
            sudo docker exec "$CONTAINER" bash -c \
              "sed -i \"s/^#*listen_addresses.*/listen_addresses = 'localhost' /\" /var/lib/postgresql/data/postgresql.conf"

            # Restart PostgreSQL to apply configuration changes
            echo "üîÑ Restarting PostgreSQL for local-only access..."
            sudo docker restart "$CONTAINER"

            # Wait for PostgreSQL to be ready after restart
            echo "‚è≥ Waiting for PostgreSQL to be ready after restart..."
            for i in $(seq 1 30); do
              if sudo docker exec "$CONTAINER" pg_isready -U "$POSTGRES_ADMIN_USER" -d postgres -h 127.0.0.1 >/dev/null 2>&1; then
                echo "‚úÖ PostgreSQL is ready after restart."
                break
              fi
              echo "üîÑ Waiting for restart... ($i/30)"
              sleep 2
            done

            echo "‚ÑπÔ∏è PostgreSQL configured for local access only"
          fi
        EOF
