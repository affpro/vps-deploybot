name: Check and install docker postgres image
description: "Check if PostgreSQL is installed in Docker, if not install it securely"

inputs:
  host:
    description: "VPS hostname or IP"
    required: true
  user:
    description: "SSH username"
    required: true
  port:
    description: "SSH port"
    required: false
    default: "22"
  postgres_admin_user: 
    description: "PostgreSQL admin username"
    required: true
  postgres_admin_pass:
    description: "PostgreSQL admin password"
    required: true
  postgres_port:
    description: "Public port for PostgreSQL"
    type: number
    required: true
    default: 5432

runs:
  using: "composite"
  steps:
    - name: Check & Install PostgreSQL in Docker (Secure)
      env:
        POSTGRES_ADMIN_USER: ${{ inputs.postgres_admin_user }}
        POSTGRES_ADMIN_PASS: ${{ inputs.postgres_admin_pass }}
        POSTGRES_PORT: ${{ inputs.postgres_port }}
      shell: bash
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ inputs.user }}@${{ inputs.host }} \
            bash -s -- \
            "${{ inputs.postgres_admin_user }}" \
            "${{ inputs.postgres_admin_pass }}" << 'EOF'

            POSTGRES_ADMIN_USER=$1
            POSTGRES_ADMIN_PASS=$2

            echo "üîé Checking PostgreSQL in Docker..."

            CONTAINER=postgres_container
            IMAGE=postgres:16

            echo "üîé Ensuring PostgreSQL container..."
            status=$(sudo docker inspect -f '{{.State.Status}}' "$CONTAINER" 2>/dev/null || echo "none")

            if [ "$status" = "running" ]; then
              echo "‚úÖ Container is running."
            elif [ "$status" = "restarting" ] || [ "$status" = "exited" ] || [ "$status" = "dead" ]; then
              echo "‚ÑπÔ∏è Container exists but state=$status. Showing logs:"
              sudo docker logs --tail=50 "$CONTAINER" || true
              echo "Attempting to start..."
              sudo docker start "$CONTAINER" || true
            else
              echo "‚ùå Container not found. Creating..."
              sudo docker pull "$IMAGE"
              sudo docker run -d \
                --name "$CONTAINER" \
                -e POSTGRES_USER="$POSTGRES_ADMIN_USER" \
                -e POSTGRES_PASSWORD="$POSTGRES_ADMIN_PASS" \
                -e POSTGRES_DB=postgres \
                -p 5432:5432 \
                -v postgres_data:/var/lib/postgresql/data \
                --health-cmd="pg_isready -U ${POSTGRES_ADMIN_USER} -d postgres || exit 1" \
                --health-interval=5s \
                --health-retries=20 \
                --health-timeout=5s \
                --health-start-period=10s \
                --restart always \
                "$IMAGE"
              echo "‚úÖ Container created with health checks."
            fi

            sudo ufw allow 5432/tcp
            echo "‚úÖ Port 5432 is open for PostgreSQL!"
        EOF
    - name: Check PostgreSQL Connection (robust)
      shell: bash
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ inputs.user }}@${{ inputs.host }} \
          bash -s -- "${{ inputs.postgres_admin_user }}" << 'EOF'
          set -euo pipefail
          POSTGRES_ADMIN_USER="$1"
          CONTAINER=postgres_container

          echo "‚è≥ Waiting for container to be running..."
          for i in $(seq 1 60); do
            state=$(sudo docker inspect -f '{{.State.Status}}' "$CONTAINER" 2>/dev/null || echo "none")
            health=$(sudo docker inspect -f '{{if .State.Health}}{{.State.Health.Status}}{{else}}none{{end}}' "$CONTAINER" 2>/dev/null || echo "none")

            if [ "$state" = "running" ]; then
              break
            fi

            if [ "$state" = "restarting" ] || [ "$state" = "exited" ] || [ "$state" = "dead" ]; then
              echo "‚ùå Container state: status=$state health=$health"
              echo "---- docker logs (last 50) ----"
              sudo docker logs --tail=50 "$CONTAINER" || true
              exit 1
            fi
            sleep 2
          done

          echo "‚è≥ Checking PostgreSQL readiness..."
          for i in $(seq 1 60); do
            if sudo docker exec "$CONTAINER" pg_isready -U "$POSTGRES_ADMIN_USER" -d postgres -h 127.0.0.1 >/dev/null 2>&1; then
              echo "‚úÖ PostgreSQL is ready."
              exit 0
            fi
            echo "üîÑ Waiting... ($i/60)"
            sleep 2
          done

          echo "‚ùå Timed out. Logs:"
          sudo docker logs --tail=50 "$CONTAINER" || true
          exit 1
        EOF
